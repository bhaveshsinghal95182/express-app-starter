import { CodeBlock } from "@/components/ui/code-block";

export default function TemplatesPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="scroll-m-20 text-4xl font-bold tracking-tight">Project Templates</h1>
        <p className="text-xl text-muted-foreground">
          Understanding the different project structures and templates generated by Kickstart Express.
        </p>
      </div>

      <div className="space-y-8">
        <section>
          <h2 className="scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight first:mt-0">
            Template Overview
          </h2>
          <p className="leading-7">
            Kickstart Express generates different project structures based on your configuration choices. 
            Each template is designed for specific use cases and development preferences.
          </p>
        </section>

        <section>
          <h2 className="scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight">
            Simple Structure
          </h2>
          <p className="leading-7 mb-4">
            The simplest template with minimal configuration. Perfect for quick prototypes and learning.
          </p>
          
          <div className="space-y-4">
            <h3 className="scroll-m-20 text-xl font-semibold tracking-tight">JavaScript Simple</h3>
            <CodeBlock>kickstart-express --name simple-js --language js</CodeBlock>
            <div className="border rounded-lg p-4">
              <h4 className="font-semibold mb-2">Generated Structure:</h4>
              <CodeBlock>
{`simple-js/
├── index.js              # Main server file
├── package.json          # Dependencies and scripts
├── .env                  # Environment variables
├── .gitignore           # Git ignore rules
└── README.md            # Project documentation`}
</CodeBlock>
            </div>
            
            <h3 className="scroll-m-20 text-xl font-semibold tracking-tight">TypeScript Simple</h3>
            <CodeBlock>kickstart-express --name simple-ts --language ts</CodeBlock>
            <div className="border rounded-lg p-4">
              <h4 className="font-semibold mb-2">Generated Structure:</h4>
              <CodeBlock>
{`simple-ts/
├── src/
│   └── index.ts         # Main server file
├── package.json         # Dependencies and scripts
├── tsconfig.json        # TypeScript configuration
├── .env                 # Environment variables
├── .gitignore          # Git ignore rules
└── README.md           # Project documentation`}
</CodeBlock>
            </div>
          </div>
        </section>

        <section>
          <h2 className="scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight">
            Src Folder Structure
          </h2>
          <p className="leading-7 mb-4">
            Organized structure with dedicated src folder. Better for medium-sized projects.
          </p>
          
          <CodeBlock>kickstart-express --name organized-project --language ts --src</CodeBlock>
          <div className="border rounded-lg p-4">
            <h4 className="font-semibold mb-2">Generated Structure:</h4>
            <CodeBlock>
{`organized-project/
├── src/
│   └── index.ts         # Main application file
├── package.json         # Dependencies and scripts
├── tsconfig.json        # TypeScript configuration
├── .env                 # Environment variables
├── .gitignore          # Git ignore rules
└── README.md           # Project documentation`}
</CodeBlock>
          </div>

          <div className="mt-6">
            <h3 className="scroll-m-20 text-xl font-semibold tracking-tight">Key Features:</h3>
            <ul className="my-6 ml-6 list-disc [&>li]:mt-2">
              <li>Clean separation of source code</li>
              <li>Better organization for growing projects</li>
              <li>Easy to maintain and understand</li>
              <li>Standard practice in modern Node.js development</li>
            </ul>
          </div>
        </section>

        <section>
          <h2 className="scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight">
            Structured Architecture
          </h2>
          <p className="leading-7 mb-4">
            Enterprise-ready structure with separation of concerns. Perfect for larger applications and teams.
          </p>
          
          <CodeBlock>kickstart-express --name enterprise-api --language ts --structured</CodeBlock>
          <div className="border rounded-lg p-4">
            <h4 className="font-semibold mb-2">Generated Structure:</h4>
            <CodeBlock>
{`enterprise-api/
├── src/
│   ├── controllers/
│   │   └── calculator.controller.ts    # Request handlers
│   ├── routes/
│   │   └── calculator.route.ts         # Route definitions
│   ├── services/
│   │   └── calculator.service.ts       # Business logic
│   ├── models/
│   │   └── calculation.model.ts        # Data models/types
│   └── index.ts                        # Main application file
├── package.json                        # Dependencies and scripts
├── tsconfig.json                       # TypeScript configuration
├── .env                               # Environment variables
├── .gitignore                         # Git ignore rules
└── README.md                          # Project documentation`}
</CodeBlock>
          </div>

          <div className="mt-6 space-y-4">
            <h3 className="scroll-m-20 text-xl font-semibold tracking-tight">Architecture Components:</h3>
            
            <div className="border rounded-lg p-4">
              <h4 className="font-semibold">Controllers</h4>
              <p className="text-sm text-muted-foreground">
                Handle HTTP requests and responses. Manage request validation, call services, and format responses.
              </p>
              <CodeBlock language="typescript" showCard={false} className="mt-2">
{`// calculator.controller.ts
export class CalculatorController {
  add(req: Request, res: Response) {
    // Handle add operation
  }
}`}
              </CodeBlock>
            </div>

            <div className="border rounded-lg p-4">
              <h4 className="font-semibold">Routes</h4>
              <p className="text-sm text-muted-foreground">
                Define API endpoints and middleware. Connect URLs to controller methods.
              </p>
              <CodeBlock language="typescript" showCard={false} className="mt-2">
{`// calculator.route.ts
router.post('/add', calculatorController.add);
router.get('/', calculatorController.getInfo);`}
              </CodeBlock>
            </div>

            <div className="border rounded-lg p-4">
              <h4 className="font-semibold">Services</h4>
              <p className="text-sm text-muted-foreground">
                Contain business logic, data processing, and external API calls.
              </p>
              <CodeBlock language="typescript" showCard={false} className="mt-2">
{`// calculator.service.ts
export class CalculatorService {
  add(a: number, b: number): number {
    return a + b;
  }
}`}
              </CodeBlock>
            </div>

            <div className="border rounded-lg p-4">
              <h4 className="font-semibold">Models</h4>
              <p className="text-sm text-muted-foreground">
                Define data structures, interfaces, and type definitions.
              </p>
              <CodeBlock language="typescript" showCard={false} className="mt-2">
{`// calculation.model.ts
export interface CalculationRequest {
  a: number;
  b: number;
}

export interface CalculationResponse {
  result: number;
}`}
              </CodeBlock>
            </div>
          </div>

          <div className="mt-6">
            <h3 className="scroll-m-20 text-xl font-semibold tracking-tight">Sample API:</h3>
            <p className="leading-7 mb-4">The structured template includes a working calculator API:</p>
            <CodeBlock>
{`# Get API info
GET /api/calculator
Response: { "message": "Calculator API is working!" }

# Add two numbers
POST /api/calculator/add
Body: { "a": 5, "b": 3 }
Response: { "result": 8 }`}
</CodeBlock>
          </div>
        </section>

        <section>
          <h2 className="scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight">
            Docker Templates
          </h2>
          <p className="leading-7 mb-4">
            Any template can include Docker configuration for containerized deployment.
          </p>
          
          <CodeBlock>kickstart-express --name docker-api --language ts --docker --structured</CodeBlock>
          <div className="border rounded-lg p-4">
            <h4 className="font-semibold mb-2">Additional Docker Files:</h4>
            <CodeBlock>
{`docker-api/
├── Dockerfile              # Container definition
├── docker-compose.yml      # Service composition
├── .dockerignore          # Docker ignore rules
├── src/                   # Application code
└── ...                    # Other project files`}
</CodeBlock>
          </div>

          <div className="mt-6 space-y-4">
            <div className="border rounded-lg p-4">
              <h4 className="font-semibold">Dockerfile Features:</h4>
              <ul className="mt-2 ml-6 list-disc [&>li]:mt-1 text-sm">
                <li>Multi-stage build for optimized production images</li>
                <li>pnpm integration for fast dependency installation</li>
                <li>Non-root user for security</li>
                <li>Proper layer caching for faster builds</li>
              </ul>
            </div>

            <div className="border rounded-lg p-4">
              <h4 className="font-semibold">Docker Compose Features:</h4>
              <ul className="mt-2 ml-6 list-disc [&>li]:mt-1 text-sm">
                <li>Development and production configurations</li>
                <li>Volume mounting for live development</li>
                <li>Environment variable management</li>
                <li>Health checks and restart policies</li>
              </ul>
            </div>
          </div>
        </section>

        <section>
          <h2 className="scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight">
            Template Comparison
          </h2>
          <div className="overflow-x-auto">
            <table className="w-full border-collapse border border-border">
              <thead>
                <tr className="border-b">
                  <th className="border border-border px-4 py-2 text-left">Feature</th>
                  <th className="border border-border px-4 py-2 text-left">Simple</th>
                  <th className="border border-border px-4 py-2 text-left">Src Folder</th>
                  <th className="border border-border px-4 py-2 text-left">Structured</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td className="border border-border px-4 py-2 font-medium">Complexity</td>
                  <td className="border border-border px-4 py-2">Low</td>
                  <td className="border border-border px-4 py-2">Medium</td>
                  <td className="border border-border px-4 py-2">High</td>
                </tr>
                <tr>
                  <td className="border border-border px-4 py-2 font-medium">Learning Curve</td>
                  <td className="border border-border px-4 py-2">Easy</td>
                  <td className="border border-border px-4 py-2">Easy</td>
                  <td className="border border-border px-4 py-2">Medium</td>
                </tr>
                <tr>
                  <td className="border border-border px-4 py-2 font-medium">Scalability</td>
                  <td className="border border-border px-4 py-2">Limited</td>
                  <td className="border border-border px-4 py-2">Good</td>
                  <td className="border border-border px-4 py-2">Excellent</td>
                </tr>
                <tr>
                  <td className="border border-border px-4 py-2 font-medium">Team Projects</td>
                  <td className="border border-border px-4 py-2">Small</td>
                  <td className="border border-border px-4 py-2">Medium</td>
                  <td className="border border-border px-4 py-2">Large</td>
                </tr>
                <tr>
                  <td className="border border-border px-4 py-2 font-medium">Code Organization</td>
                  <td className="border border-border px-4 py-2">Basic</td>
                  <td className="border border-border px-4 py-2">Good</td>
                  <td className="border border-border px-4 py-2">Excellent</td>
                </tr>
                <tr>
                  <td className="border border-border px-4 py-2 font-medium">Best For</td>
                  <td className="border border-border px-4 py-2">Prototypes, Learning</td>
                  <td className="border border-border px-4 py-2">Small to Medium Apps</td>
                  <td className="border border-border px-4 py-2">Enterprise, Large Apps</td>
                </tr>
              </tbody>
            </table>
          </div>
        </section>

        <section>
          <h2 className="scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight">
            Generated Code Examples
          </h2>
          
          <div className="space-y-6 mt-6">
            <div className="border rounded-lg p-4">
              <h3 className="scroll-m-20 text-xl font-semibold tracking-tight">Simple Template - index.ts</h3>
              <CodeBlock>{`import express from 'express'; import cors from 'cors'; import dotenv from 'dotenv'; dotenv.config(); const app = express(); const PORT = process.env.PORT || 3000; // Middleware app.use(cors()); app.use(express.json()); // Routes app.get('/', (req, res) => { res.json({ message: 'Hello from Express!' }); }); app.listen(PORT, () => { console.log(\`Server running on port \${PORT}\`); });`}</CodeBlock>
            </div>

            <div className="border rounded-lg p-4">
              <h3 className="scroll-m-20 text-xl font-semibold tracking-tight">Structured Template - Controller</h3>
              <CodeBlock>
{`import { Request, Response } from 'express';
import { CalculatorService } from '../services/calculator.service';
import { CalculationRequest } from '../models/calculation.model';

export class CalculatorController {
  private calculatorService: CalculatorService;

  constructor() {
    this.calculatorService = new CalculatorService();
  }

  public getInfo = (req: Request, res: Response): void => {
    res.json({ message: 'Calculator API is working!' });
  };

  public add = (req: Request, res: Response): void => {
    try {
      const { a, b }: CalculationRequest = req.body;
      const result = this.calculatorService.add(a, b);
      res.json({ result });
    } catch (error) {
      res.status(400).json({ error: 'Invalid input' });
    }
  };
}`}
</CodeBlock>
            </div>
          </div>
        </section>

        <section>
          <h2 className="scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight">
            Choosing the Right Template
          </h2>
          
          <div className="space-y-4 mt-6">
            <div className="border rounded-lg p-4">
              <h3 className="font-semibold text-green-700 dark:text-green-400">✅ Use Simple Template When:</h3>
              <ul className="mt-2 ml-6 list-disc [&>li]:mt-1 text-sm">
                <li>Learning Express.js fundamentals</li>
                <li>Building quick prototypes or demos</li>
                <li>Creating simple APIs with few endpoints</li>
                <li>Working solo on small projects</li>
              </ul>
            </div>

            <div className="border rounded-lg p-4">
              <h3 className="font-semibold text-blue-700 dark:text-blue-400">✅ Use Src Folder Template When:</h3>
              <ul className="mt-2 ml-6 list-disc [&>li]:mt-1 text-sm">
                <li>Building medium-sized applications</li>
                <li>Working with a small team</li>
                <li>Want better organization than simple but not full structure</li>
                <li>Planning to grow the project over time</li>
              </ul>
            </div>

            <div className="border rounded-lg p-4">
              <h3 className="font-semibold text-purple-700 dark:text-purple-400">✅ Use Structured Template When:</h3>
              <ul className="mt-2 ml-6 list-disc [&>li]:mt-1 text-sm">
                <li>Building enterprise or production applications</li>
                <li>Working with large teams</li>
                <li>Need clear separation of concerns</li>
                <li>Planning complex business logic</li>
                <li>Want to follow industry best practices</li>
              </ul>
            </div>

            <div className="border rounded-lg p-4">
              <h3 className="font-semibold text-orange-700 dark:text-orange-400">✅ Add Docker When:</h3>
              <ul className="mt-2 ml-6 list-disc [&>li]:mt-1 text-sm">
                <li>Deploying to containerized environments</li>
                <li>Working with microservices architecture</li>
                <li>Need consistent development environments</li>
                <li>Planning to use orchestration platforms (Kubernetes, Docker Swarm)</li>
              </ul>
            </div>
          </div>
        </section>
      </div>
    </div>
  )
}